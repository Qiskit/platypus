diff --git a/node_modules/@mathigon/studio/build/markdown/mathjax.js b/node_modules/@mathigon/studio/build/markdown/mathjax.js
index 93eae4d..e8da114 100644
--- a/node_modules/@mathigon/studio/build/markdown/mathjax.js
+++ b/node_modules/@mathigon/studio/build/markdown/mathjax.js
@@ -7,7 +7,7 @@
 const path = require('path');
 const entities = require('html-entities');
 const mathjax = require('mathjax');
-const {readFile, writeFile, warning} = require('../utilities');
+const {CONFIG, readFile, writeFile, warning} = require('../utilities');
 
 const cacheFile = path.join(process.env.HOME, '/.mathjax-cache');
 const mathJaxStore = JSON.parse(readFile(cacheFile, '{}'));
@@ -17,9 +17,15 @@ const placeholders = {};
 let placeholderCount = 0;
 let promise = undefined;
 
+const tex2html = CONFIG.parser?.tex2html || false;
+
+function getId (code, isInline) {
+  return entities.decode(code) + (isInline || false) + (tex2html ? 'html' : '');
+}
+
 
 module.exports.makeTexPlaceholder = function(code, isInline = false) {
-  const id = entities.decode(code) + (isInline || false);
+  const id = getId(code, isInline);
   if (id in mathJaxStore) return mathJaxStore[id];
 
   const placeholder = `XEQUATIONX${placeholderCount++}XEQUATIONX`;
@@ -28,7 +34,7 @@ module.exports.makeTexPlaceholder = function(code, isInline = false) {
 };
 
 async function texToSvg(code, isInline) {
-  const id = entities.decode(code) + (isInline || false);
+  const id = getId(code, isInline);
   if (mathJaxStore[id]) return mathJaxStore[id];
 
   if (!promise) {
@@ -56,10 +62,67 @@ async function texToSvg(code, isInline) {
   return mathJaxStore[id] = output;
 }
 
+async function texToHtml(code, isInline) {
+  const id = getId(code, isInline);
+  if (mathJaxStore[id]) return mathJaxStore[id];
+
+  if (!promise) {
+    promise = mathjax.init({
+      options: {
+        renderActions: {
+          // add the TEX string into the DOM node
+          addInputText: [200,
+            (doc) => {
+              for (const math of doc.math) MathJax.config.addInputText(math, doc);
+            },
+            (math, doc) => MathJax.config.addInputText(math, doc)
+          ]
+        }
+      },
+      addInputText(math, doc) {
+        const adaptor = doc.adaptor;
+        const text = adaptor.node('mjx-input-tex', {
+          'aria-hidden': true,
+          'style': 'display:none;'
+        }, [
+          adaptor.text(math.start.delim + math.math + math.end.delim)
+        ]);
+        adaptor.append(math.typesetRoot, text);
+      },
+      loader: {load: ['input/tex-full', 'output/chtml']},
+      // https://docs.mathjax.org/en/latest/options/output/chtml.html#the-configuration-block
+      chtml: {
+        adaptiveCSS: false,
+        fontURL: 'https://cdn.jsdelivr.net/npm/mathjax@3.1.0/es5/output/chtml/fonts/woff-v2'
+      }
+    });
+  }
+
+  let output = '';
+
+  try {
+    const MathJax = await promise;
+    const adaptor = MathJax.startup.adaptor;
+
+    const html = await MathJax.tex2chtml(code, {display: !isInline});
+    output = adaptor.outerHTML(html);
+  } catch (e) {
+    warning(`  MathJax Error: ${e.message} at "${code}"`);
+  }
+
+  storeChanged = true;
+  return mathJaxStore[id] = output;
+}
+
 module.exports.fillTexPlaceholders = async function(doc) {
   const matches = doc.match(/XEQUATIONX[0-9]+XEQUATIONX/g) || [];
   for (const placeholder of matches) {
-    const code = await texToSvg(...placeholders[placeholder]);
+    let code = '';
+    if (tex2html) {
+      code = await texToHtml(...placeholders[placeholder]);
+    } else {
+      code = await texToSvg(...placeholders[placeholder]);
+    }
     doc = doc.replace(placeholder, code);
   }
   return doc;
diff --git a/node_modules/@mathigon/studio/build/markdown/parser.js b/node_modules/@mathigon/studio/build/markdown/parser.js
index 14a4bcf..e143648 100644
--- a/node_modules/@mathigon/studio/build/markdown/parser.js
+++ b/node_modules/@mathigon/studio/build/markdown/parser.js
@@ -111,6 +111,7 @@ async function parseStep(content, index, directory, courseId, locale = 'en') {
   for (const $md of $$(body, '.md')) {
     $md.classList.remove('md');
     $md.innerHTML = marked($md.innerHTML, {renderer}).replace(/^<p>|<\/p>$/g, '');
+    $md.innerHTML = await fillTexPlaceholders($md.innerHTML);
   }
 
   // Add the [parent] attribute as class to all elements parents
diff --git a/node_modules/@mathigon/studio/server/accounts.ts b/node_modules/@mathigon/studio/server/accounts.ts
index a28f2db..d1eb2e7 100755
--- a/node_modules/@mathigon/studio/server/accounts.ts
+++ b/node_modules/@mathigon/studio/server/accounts.ts
@@ -266,110 +266,110 @@ function redirect(req: express.Request, res: express.Response, data: ResponseDat
 
 export default function setupAuthEndpoints(app: MathigonStudioApp) {
 
-  app.get('/login', (req, res) => {
-    if (req.user) return res.redirect('/dashboard');
-    res.render('accounts/login');
-  });
+  // app.get('/login', (req, res) => {
+  //   if (req.user) return res.redirect('/dashboard');
+  //   res.render('accounts/login');
+  // });
 
-  app.post('/login', async (req, res) => {
-    const response = await login(req);
-    if (response.user) req.session.auth!.user = response.user.id;
-    redirect(req, res, response, '/dashboard', '/login');
-  });
+  // app.post('/login', async (req, res) => {
+  //   const response = await login(req);
+  //   if (response.user) req.session.auth!.user = response.user.id;
+  //   redirect(req, res, response, '/dashboard', '/login');
+  // });
 
   app.get('/logout', (req, res) => {
     delete req.session.auth!.user;
     req.session.save(() => res.redirect('back'));
   });
 
-  app.get('/signup', (req, res) => {
-    if (req.user) return res.redirect('/dashboard');
-    res.render('accounts/signup', {countries: COUNTRY_LIST});
-  });
-
-  app.post('/signup', async (req, res) => {
-    const response = await signup(req);
-    if (response.user) req.session.auth!.user = response.user.id;
-    redirect(req, res, response, '/dashboard', '/signup');
-  });
-
-  app.get('/confirm/:id/:token', async (req, res) => {
-    const response = await confirmEmail(req);
-    redirect(req, res, response, '/dashboard', '/login');
-  });
-
-  app.get('/forgot', (req, res) => {
-    if (req.user) return res.redirect('/dashboard');
-    res.render('accounts/forgot');
-  });
-
-  app.post('/forgot', async (req, res) => {
-    const response = await requestPasswordResetEmail(req);
-    redirect(req, res, response, '/login', '/forgot');
-  });
-
-  app.get('/reset/:token', async (req, res) => {
-    const response = await checkResetToken(req);
-    if (response.error) return redirect(req, res, response, '/forgot');
-    res.render('accounts/reset');
-  });
-
-  app.post('/reset/:token', async (req, res) => {
-    const response = await resetPassword(req);
-    redirect(req, res, response, '/login', '/reset');
-  });
-
-  app.get('/profile', (req, res) => {
-    if (!req.user) return res.redirect('/login');
-    res.render('accounts/profile', {countries: COUNTRY_LIST});
-  });
-
-  app.post('/profile/details', async (req, res) => {
-    const response = await updateProfile(req);
-    redirect(req, res, response, '/profile');
-  });
-
-  app.post('/profile/password', async (req, res) => {
-    const response = await updatePassword(req);
-    redirect(req, res, response, '/profile');
-  });
-
-  app.get('/profile/delete', async (req, res) => {
-    const response = await deleteAccount(req, true);
-    redirect(req, res, response, '/profile', '/profile');
-  });
-
-  app.get('/profile/undelete', async (req, res) => {
-    const response = await deleteAccount(req, false);
-    redirect(req, res, response, '/profile', '/profile');
-  });
-
-  app.get('/profile/resend', async (req, res) => {
-    const response = await resendVerificationEmail(req);
-    redirect(req, res, response, req.user ? '/profile' : '/login');
-  });
+  // app.get('/signup', (req, res) => {
+  //   if (req.user) return res.redirect('/dashboard');
+  //   res.render('accounts/signup', {countries: COUNTRY_LIST});
+  // });
+
+  // app.post('/signup', async (req, res) => {
+  //   const response = await signup(req);
+  //   if (response.user) req.session.auth!.user = response.user.id;
+  //   redirect(req, res, response, '/dashboard', '/signup');
+  // });
+
+  // app.get('/confirm/:id/:token', async (req, res) => {
+  //   const response = await confirmEmail(req);
+  //   redirect(req, res, response, '/dashboard', '/login');
+  // });
+
+  // app.get('/forgot', (req, res) => {
+  //   if (req.user) return res.redirect('/dashboard');
+  //   res.render('accounts/forgot');
+  // });
+
+  // app.post('/forgot', async (req, res) => {
+  //   const response = await requestPasswordResetEmail(req);
+  //   redirect(req, res, response, '/login', '/forgot');
+  // });
+
+  // app.get('/reset/:token', async (req, res) => {
+  //   const response = await checkResetToken(req);
+  //   if (response.error) return redirect(req, res, response, '/forgot');
+  //   res.render('accounts/reset');
+  // });
+
+  // app.post('/reset/:token', async (req, res) => {
+  //   const response = await resetPassword(req);
+  //   redirect(req, res, response, '/login', '/reset');
+  // });
+
+  // app.get('/profile', (req, res) => {
+  //   if (!req.user) return res.redirect('/login');
+  //   res.render('accounts/profile', {countries: COUNTRY_LIST});
+  // });
+
+  // app.post('/profile/details', async (req, res) => {
+  //   const response = await updateProfile(req);
+  //   redirect(req, res, response, '/profile');
+  // });
+
+  // app.post('/profile/password', async (req, res) => {
+  //   const response = await updatePassword(req);
+  //   redirect(req, res, response, '/profile');
+  // });
+
+  // app.get('/profile/delete', async (req, res) => {
+  //   const response = await deleteAccount(req, true);
+  //   redirect(req, res, response, '/profile', '/profile');
+  // });
+
+  // app.get('/profile/undelete', async (req, res) => {
+  //   const response = await deleteAccount(req, false);
+  //   redirect(req, res, response, '/profile', '/profile');
+  // });
+
+  // app.get('/profile/resend', async (req, res) => {
+  //   const response = await resendVerificationEmail(req);
+  //   redirect(req, res, response, req.user ? '/profile' : '/login');
+  // });
 
   app.post('/profile/accept-policies', async (req, res) => {
     await acceptPolicies(req);
     res.send('ok');
   });
 
-  app.get('/profile/data.json', async (req, res) => {
-    if (!req.user) return res.redirect('/login');
-    res.json(await exportData(req.user));
-  });
+  // app.get('/profile/data.json', async (req, res) => {
+  //   if (!req.user) return res.redirect('/login');
+  //   res.json(await exportData(req.user));
+  // });
 
   app.get('/auth/:provider', async (req, res, next) => {
     const response = await oAuthLogin(req);
     if (!response) return next();
-    redirect(req, res, response, '/signup');
+    redirect(req, res, response, '/signin');
   });
 
   app.get('/auth/:provider/callback', async (req, res, next) => {
     const response = await oAuthCallback(req);
     if (!response) return next();
     if (response.user) req.session.auth!.user = response.user.id;
-    redirect(req, res, response, '/dashboard', '/signup');
+    redirect(req, res, response, '/account', '/signin');
   });
 
   app.get('/cron/cleanup', async (req, res, next) => {
diff --git a/node_modules/@mathigon/studio/server/app.ts b/node_modules/@mathigon/studio/server/app.ts
index eb45d4a..37452d2 100755
--- a/node_modules/@mathigon/studio/server/app.ts
+++ b/node_modules/@mathigon/studio/server/app.ts
@@ -315,6 +315,8 @@ export class MathigonStudioApp {
 
     this.post('/course/:course/:section', async (req, res, next) => {
       if (!CONFIG.accounts.enabled) return res.status(200).send('ok');
+      // Not store progress if there is no user logged
+      if (!req.user?.id) return res.status(200).send('ok');
 
       const course = getCourse(req.params.course, req.locale.id);
       const section = course?.sections.find(s => s.id === req.params.section);
diff --git a/node_modules/@mathigon/studio/server/utilities/mongodb.ts b/node_modules/@mathigon/studio/server/utilities/mongodb.ts
index 227d047..22dcf81 100644
--- a/node_modules/@mathigon/studio/server/utilities/mongodb.ts
+++ b/node_modules/@mathigon/studio/server/utilities/mongodb.ts
@@ -37,5 +37,6 @@ export async function connectMongo() {
 
 export function getMongoStore() {
   const clientPromise = connectMongo();  // async
+  // @ts-ignore
   return MongoStore.create({clientPromise, touchAfter: 12 * 3600});
 }
diff --git a/node_modules/@mathigon/studio/server/utilities/oauth.ts b/node_modules/@mathigon/studio/server/utilities/oauth.ts
index 115cec3..6ce1173 100644
--- a/node_modules/@mathigon/studio/server/utilities/oauth.ts
+++ b/node_modules/@mathigon/studio/server/utilities/oauth.ts
@@ -132,7 +132,10 @@ async function findOrCreateUser(req: express.Request, provider: Provider, profil
 // We use req.headers.host rather than req.hostname because we need to include
 // the localhost port during local development. Note that the redirect URI
 // must exactly match a value set up with the third-party oAuth provider.
-const host = (req: express.Request) => `${req.protocol}://${req.headers.host}`;
+const host = (req: express.Request) => {
+  const protocol = req.headers.host?.includes('localhost') ? 'http' : 'https';
+  return `${protocol}://${req.headers.host}`
+};
 
 function login(req: express.Request, provider: Provider) {
   const config = PROVIDERS[provider];
